# handlers/rates.py
from aiogram import Router, types
from aiogram.filters import Command
from services.api_client import get_all_bank_rates

from services.api_client import get_exchange_rates

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –º–æ–¥—É–ª—è
router = Router()
@router.message(Command("rates"))
async def cmd_rates(message: types.Message):
    rates = get_all_bank_rates()
    if not rates:
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    response = "<b>üí± –ü–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç:</b>\n\n"

    for bank_name, bank_rates in rates.items():
        response += f"<b>üè¶ {bank_name}</b>\n"
        for rate in bank_rates:
            response += (
                f"üî∏ <b>{rate['ccy']} ‚Üí {rate['base_ccy']}</b>\n"
                f"üü¢ –ö—É–ø—ñ–≤–ª—è: <code>{rate['buy']}</code>\n"
                f"üî¥ –ü—Ä–æ–¥–∞–∂: <code>{rate['sale']}</code>\n\n"
            )

    await message.answer(response, parse_mode="HTML")
# @router.message(Command("rates"))
# async def cmd_rates(message: types.Message):
#     rates = get_exchange_rates()
#     if not rates:
#         await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
#         return
#
#     response = "üíµ –ü–æ—Ç–æ—á–Ω–∏–π –∫—É—Ä—Å:\n\n"
#     for rate in rates:
#         response += (
#             f"{rate['ccy']} ‚Üí {rate['base_ccy']}:\n"
#             f"–ö—É–ø—ñ–≤–ª—è: {rate['buy']}\n"
#             f"–ü—Ä–æ–¥–∞–∂: {rate['sale']}\n\n"
#         )
#     await message.answer(response)


# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ—É—Ç–µ—Ä–∞ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É Dispatcher
def register_rates_handlers(dp):
    dp.include_router(router)
