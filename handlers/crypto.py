from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.api_client import BinanceAPI

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
crypto_router = Router()


@crypto_router.message(Command("crypto_convert"))
async def crypto_rates(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å–∏ BTC, ETH, USDT"""
    btc_price = BinanceAPI.get_crypto_price("BTCUSDT")
    eth_price = BinanceAPI.get_crypto_price("ETHUSDT")

    text = (
        f"üí∞ <b>–ö—É—Ä—Å–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n\n"
        f"üü† <b>BTC:</b> ${btc_price:,.2f}\n"
        f"üîµ <b>ETH:</b> ${eth_price:,.2f}"
    )

    await message.answer(text, parse_mode="HTML")


@crypto_router.message(Command("convert–µ"))
async def crypto_convert(message: types.Message):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (/converte 0.01 BTC to USDT)"""
    try:
        args = message.text.split()
        amount = float(args[1])
        from_asset = args[2].upper()
        to_asset = args[4].upper()

        result = BinanceAPI.convert_crypto(amount, from_asset, to_asset)
        await message.answer(f"üîπ {amount} {from_asset} = {result:.8f} {to_asset}")
    except (IndexError, ValueError):
        await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: <code>/convert 0.01 BTC to USDT</code>", parse_mode="HTML")


@crypto_router.message(Command("convert_to_uah"))
async def convert_to_uah_handler(message: types.Message):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –∫—Ä–∏–ø—Ç—É –≤ –≥—Ä–∏–≤–Ω—ñ (/convert_to_uah 0.01 BTC)"""
    try:
        args = message.text.split()
        if len(args) != 3:
            raise ValueError

        amount = float(args[1])
        crypto = args[2].upper()

        if crypto not in ["BTC", "ETH"]:
            await message.answer("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ BTC —Ç–∞ ETH")
            return

        result = BinanceAPI.convert_to_uah(amount, crypto)
        await message.answer(f"üîπ {amount} {crypto} = {result:,.2f} ‚Ç¥")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /convert_to_uah 0.01 BTC")


def get_crypto_router() -> Router:
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π"""
    crypto_router = Router()

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —à–≤–∏–¥–∫–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
    def get_conversion_keyboard():
        builder = InlineKeyboardBuilder()
        builder.add(
            types.InlineKeyboardButton(
                text="BTC ‚Üí UAH",
                callback_data="convert_btc_uah"
            ),
            types.InlineKeyboardButton(
                text="ETH ‚Üí UAH",
                callback_data="convert_eth_uah"
            )
        )
        return builder.as_markup()

    @crypto_router.message(Command("crypto_rates"))
    async def show_crypto_rates(message: types.Message):
        """–ü–æ–∫–∞–∑—É—î –∫—É—Ä—Å–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑ –∫–Ω–æ–ø–∫–∞–º–∏"""
        btc_rate = BinanceAPI.get_crypto_to_uah("BTC")
        eth_rate = BinanceAPI.get_crypto_to_uah("ETH")

        text = (
            f"üìä <b>–ü–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏:</b>\n\n"
            f"üü† 1 BTC = {btc_rate:,.2f} ‚Ç¥\n"
            f"üîµ 1 ETH = {eth_rate:,.2f} ‚Ç¥\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –ø–∞—Ä—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:"
        )

        await message.answer(
            text,
            reply_markup=get_conversion_keyboard(),
            parse_mode="HTML"
        )

    @crypto_router.message(Command("convert_to_uah"))
    async def convert_to_uah(message: types.Message):
        """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó (/convert_to_uah 0.1 BTC)"""
        try:
            args = message.text.split()
            if len(args) != 3:
                raise ValueError

            amount = float(args[1])
            crypto = args[2].upper()

            if crypto not in ["BTC", "ETH"]:
                await message.answer("‚ùå –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ BTC —Ç–∞ ETH")
                return

            result = BinanceAPI.convert_to_uah(amount, crypto)
            await message.answer(f"üîπ {amount} {crypto} = {result:,.2f} ‚Ç¥")

        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n"
                "<code>/convert_to_uah [–∫—ñ–ª—å–∫—ñ—Å—Ç—å] [BTC/ETH]</code>",
                parse_mode="HTML"
            )

    @crypto_router.callback_query(lambda c: c.data.startswith("convert_"))
    async def handle_conversion(callback: types.CallbackQuery):
        """–û–±—Ä–æ–±–ª—è—î –∫–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ—ó –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó"""
        try:
            _, crypto, currency = callback.data.split("_")
            amount = 1  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ 1 –æ–¥–∏–Ω–∏—Ü—é –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

            if crypto == "btc":
                result = BinanceAPI.convert_to_uah(amount, "BTC")
                text = f"üü† 1 BTC = {result:,.2f} ‚Ç¥"
            elif crypto == "eth":
                result = BinanceAPI.convert_to_uah(amount, "ETH")
                text = f"üîµ 1 ETH = {result:,.2f} ‚Ç¥"
            else:
                raise ValueError

            await callback.message.edit_text(text)
            await callback.answer()

        except Exception as e:
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó", show_alert=True)

    return crypto_router